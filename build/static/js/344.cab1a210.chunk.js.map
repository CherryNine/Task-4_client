{"version":3,"file":"static/js/344.cab1a210.chunk.js","mappings":"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","sources":["app/auth/signIn.page.tsx","app/auth/store/auth.selectors.ts","app/auth/validators/authSchemas.ts"],"sourcesContent":["\nimport {\n  Controller,\n  FieldValues,\n  SubmitHandler,\n  useForm,\n} from \"react-hook-form\";\nimport { NavLink, useNavigate } from \"react-router-dom\";\nimport { Box, Button, Grid, TextField, Typography } from \"@mui/material\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\n\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { authSignInErrorSelector } from \"./store/auth.selectors\";\nimport { signIn } from \"./store/auth.actions\";\nimport { signInSchema } from \"./validators/authSchemas\";\n\nconst SignIn = () => {\n  const navigation = useNavigate();\n  const dispatch = useDispatch();\n  const authError = useSelector(authSignInErrorSelector);\n  const { control, handleSubmit, formState: { errors } } = useForm({\n    mode: \"all\",\n    resolver: yupResolver(signInSchema),\n    defaultValues: { email: \"\", password: \"\" },\n  });\n\n  const signInUser = async (values: FieldValues) => {\n    const response = await dispatch<any>(signIn(values))\n    if (response.meta.requestStatus === 'fulfilled') navigation('/user');\n  };\n\n  const submitForm: SubmitHandler<FieldValues> = (data) => {\n    signInUser(data);\n  };\n\n  return (\n    <>\n      <Grid container height=\"80vh\" justifyContent=\"center\" alignItems=\"center\">\n        <Grid item xs={10} sm={10} md={8} lg={3} xl={3}>\n          <form onSubmit={handleSubmit(submitForm)}>\n            <Box\n              component=\"main\"\n              sx={{\n                p: 2,\n                justifyContent: \"center\",\n                alignItems: \"center\",\n                display: \"flex\",\n                flexDirection: \"column\",\n                gap: 3,\n                width: \"100%\",\n              }}\n            >\n              <Typography\n                variant=\"h5\"\n                component=\"h1\"\n                sx={{ fontWeight: \"bold\", m: 1 }}\n              >\n                LOGIN\n              </Typography>\n            </Box>\n            {authError && (\n              <Typography\n                color=\"error.main\"\n                sx={{ fontSize: 16, fontWeight: \"bold\" }}\n              >\n                {authError}\n              </Typography>\n            )}\n            {errors.email && (\n              <Typography color=\"error.main\" sx={{ fontSize: 16, fontWeight: \"bold\" }}>\n                {errors.email.message}\n              </Typography>\n            )}\n            <Box sx={{ display: \"flex\", flexDirection: \"column\", mt: 2 }}>\n              <Controller\n                name=\"email\"\n                control={control}\n                render={({ field }) => (\n                  <TextField\n                    sx={{ width: \"100%\", mb: 2 }}\n\n                    {...field}\n                    helperText={errors.email ? errors.email.message : \"\"}\n                    error={!!errors.email}\n                    label=\"email\"\n                    variant=\"outlined\"\n                  />\n                )}\n              />\n              {errors.password && (\n                <Typography color=\"error.main\" sx={{ fontSize: 16, fontWeight: \"bold\" }}>\n                  {errors.password.message}\n                </Typography>\n              )}\n              <Controller\n                name=\"password\"\n                control={control}\n                render={({ field }) => (\n                  <TextField\n                    sx={{ width: \"100%\", mb: 2 }}\n\n                    {...field}\n                    helperText={errors.password ? errors.password.message : \"\"}\n                    error={!!errors.password}\n                    label=\"password\"\n                    variant=\"outlined\"\n                    type=\"password\"\n                  />\n                )}\n              />\n              <Button\n                sx={{ width: \"100%\", mb: 2 }}\n\n                color=\"primary\"\n                disabled={!!(errors.email || errors.password)}\n                variant=\"contained\"\n                type=\"submit\"\n                onClick={() => submitForm}\n              >\n                ENTER\n              </Button>\n              <Box sx={{ textAlign: \"center\" }}>\n\n                <NavLink\n                  to=\"/auth/sign-up\"\n                >\n                  Registration\n                </NavLink>\n              </Box>\n            </Box>\n          </form>\n        </Grid>\n      </Grid>\n    </>\n  );\n};\n\nexport default SignIn;\n","import { RootState } from 'store';\n\nexport const isAuthorizedSelector = (state: RootState) => state.auth.isAuthorized;  \nexport const authSignInErrorSelector = (state: RootState) => state.auth.errors.signIn;\nexport const authSignUpErrorSelector = (state: RootState) => state.auth.errors.signUp;\nexport const authSignOutErrorSelector = (state: RootState) => state.auth.errors.signOut;\nexport const authPendingSelector = (state: RootState) => state.auth.pending;\nexport const userProfileSelector = (state: RootState) => state.auth.user; \nexport const authGetUserProfileErrorSelector = (state: RootState) => state.auth.errors.getUserProfile;\nexport const authGetUserProfilePendingSelector = (state: RootState) => state.auth.pending.getUserProfile;","import * as yup from \"yup\";\r\n\r\nexport const signUpSchema = yup.object().shape({\r\n  first_name: yup.string().required(\"Required field\").min(2, \"Min 2 symbols\"),\r\n  last_name: yup.string().required(\"Required field\").min(2, \"Min 2 symbols\"),\r\n  email: yup.string().required(\"Required field!\").email(),\r\n  password: yup\r\n    .string()\r\n    .required(\"Required field\")\r\n    .min(1, \"Min 1 symbol\")\r\n    .matches(/^[0-9a-zA-Z]{1,}$/, \"Password incorrect\"),\r\n});\r\n\r\nexport const signInSchema = yup.object().shape({\r\n  email: yup.string().required(\"Required field!\").email(),\r\n  password: yup\r\n    .string()\r\n    .required(\"Required field\")\r\n    .min(1, \"Min 1 symbol\")\r\n    .matches(/^[0-9a-zA-Z]{1,}$/, \"Password incorrect\"),\r\n});"],"names":["SignIn","navigation","useNavigate","dispatch","useDispatch","authError","useSelector","authSignInErrorSelector","control","handleSubmit","formState","errors","useForm","mode","resolver","yupResolver","signInSchema","defaultValues","email","password","submitForm","data","async","signIn","values","meta","requestStatus","signInUser","_jsx","_Fragment","children","Grid","container","height","justifyContent","alignItems","item","xs","sm","md","lg","xl","_jsxs","onSubmit","Box","component","sx","p","display","flexDirection","gap","width","Typography","variant","fontWeight","m","color","fontSize","message","mt","Controller","name","render","_ref","field","TextField","mb","helperText","error","label","_ref2","type","Button","disabled","onClick","textAlign","NavLink","to","state","auth","authSignUpErrorSelector","signUp","userProfileSelector","user","signUpSchema","yup","shape","first_name","required","min","last_name","matches"],"sourceRoot":""}